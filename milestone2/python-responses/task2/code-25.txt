
-----------------------------------------
 Prompt: can you write unit tests for the following function:
Code:
def is_nested_list_like(obj):
    """
    Check if the object is list-like, and that all of its elements
    are also list-like.

    .. versionadded:: 0.20.0

    Parameters
    ----------
    obj : The object to check

    Returns
    -------
    is_list_like : bool
        Whether `obj` has list-like properties.

    Examples
    --------
    >>> is_nested_list_like([[1, 2, 3]])
    True
    >>> is_nested_list_like([{1, 2, 3}, {1, 2, 3}])
    True
    >>> is_nested_list_like(["foo"])
    False
    >>> is_nested_list_like([])
    False
    >>> is_nested_list_like([[1, 2, 3], 1])
    False

    Notes
    -----
    This won't reliably detect whether a consumable iterator (e. g.
    a generator) is a nested-list-like without consuming the iterator.
    To avoid consuming it, we always return False if the outer container
    doesn't define `__len__`.

    See Also
    --------
    is_list_like
    """
    return (is_list_like(obj) and hasattr(obj, '__len__') and
            len(obj) > 0 and all(is_list_like(item) for item in obj))
-----------------------------------------
ChatGPT response: def test_is_nested_list_like():
    assert is_nested_list_like([]) == False
    assert is_nested_list_like([[], []]) == True
    assert is_nested_list_like([[1, 2], [], [3]]) == True
    assert is_nested_list_like([(), ()]) == True
    assert is_nested_list_like([[], (), [1, 2, 3]]) == False
    assert is_nested_list_like([[], None]) == False
    assert is_nested_list_like([[1, 2], 3]) == False
    assert is_nested_list_like([{1}, {2}]) == False
    assert is_nested_list_like([[], [1], [1, 2]]) == True
    assert is_nested_list_like([[1], [2], [3]]) == True

