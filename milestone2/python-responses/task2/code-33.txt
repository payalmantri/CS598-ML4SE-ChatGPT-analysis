
-----------------------------------------
 Prompt: can you write unit tests for the given code
Code:
def scatter_plot(data, x, y, by=None, ax=None, figsize=None, grid=False,
                 **kwargs):
    """
    Make a scatter plot from two DataFrame columns

    Parameters
    ----------
    data : DataFrame
    x : Column name for the x-axis values
    y : Column name for the y-axis values
    ax : Matplotlib axis object
    figsize : A tuple (width, height) in inches
    grid : Setting this to True will show the grid
    kwargs : other plotting keyword arguments
        To be passed to scatter function

    Returns
    -------
    matplotlib.Figure
    """
    import matplotlib.pyplot as plt

    kwargs.setdefault('edgecolors', 'none')

    def plot_group(group, ax):
        xvals = group[x].values
        yvals = group[y].values
        ax.scatter(xvals, yvals, **kwargs)
        ax.grid(grid)

    if by is not None:
        fig = _grouped_plot(plot_group, data, by=by, figsize=figsize, ax=ax)
    else:
        if ax is None:
            fig = plt.figure()
            ax = fig.add_subplot(111)
        else:
            fig = ax.get_figure()
        plot_group(data, ax)
        ax.set_ylabel(pprint_thing(y))
        ax.set_xlabel(pprint_thing(x))

        ax.grid(grid)

    return fig
-----------------------------------------
ChatGPT response: import unittest
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from scatter_plot import scatter_plot

class TestScatterPlot(unittest.TestCase):

    def setUp(self):
        # Create a sample DataFrame
        np.random.seed(123)
        self.data = pd.DataFrame({
            'x': np.random.rand(50),
            'y': np.random.rand(50),
            'category': np.random.choice(['A', 'B'], 50)
        })

    def test_single_plot(self):
        fig = scatter_plot(self.data, 'x', 'y')
        self.assertIsInstance(fig, plt.Figure)
        self.assertEqual(len(fig.axes), 1)
        self.assertEqual(len(fig.axes[0].collections), 1)
        self.assertEqual(fig.axes[0].get_xlabel(), 'x')
        self.assertEqual(fig.axes[0].get_ylabel(), 'y')
        self.assertFalse(fig.axes[0].get_legend())

    def test_grouped_plot(self):
        fig = scatter_plot(self.data, 'x', 'y', by='category')
        self.assertIsInstance(fig, plt.Figure)
        self.assertEqual(len(fig.axes), 2)
        self.assertEqual(len(fig.axes[0].collections), 1)
        self.assertEqual(len(fig.axes[1].collections), 1)
        self.assertEqual(fig.axes[0].get_xlabel(), 'x')
        self.assertEqual(fig.axes[0].get_ylabel(), 'y')
        self.assertEqual(fig.axes[1].get_xlabel(), 'x')
        self.assertEqual(fig.axes[1].get_ylabel(), 'y')
        self.assertTrue(fig.axes[0].get_legend())
        self.assertTrue(fig.axes[1].get_legend())

    def test_ax_argument(self):
        fig, axes = plt.subplots(ncols=2)
        scatter_plot(self.data, 'x', 'y', ax=axes[0])
        self.assertEqual(len(fig.axes), 2)
        self.assertEqual(len(fig.axes[0].collections), 1)
        self.assertEqual(fig.axes[0], axes[0])

    def test_grid_argument(self):
        fig = scatter_plot(self.data, 'x', 'y', grid=True)
        self.assertIsInstance(fig, plt.Figure)
        self.assertEqual(len(fig.axes), 1)
        self.assertTrue(fig.axes[0].get_xgridlines()[0].get_visible())
        self.assertTrue(fig.axes[0].get_ygridlines()[0].get_visible())

