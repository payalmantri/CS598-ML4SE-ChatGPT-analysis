
-----------------------------------------
 Prompt: can you write unit tests for the given code
Code:
def _tilt(c, direction:uniform_int, magnitude:uniform=0, invert=False):
    "Tilt `c` field with random `direction` and `magnitude`."
    orig_pts = [[-1,-1], [-1,1], [1,-1], [1,1]]
    if direction == 0:   targ_pts = [[-1,-1], [-1,1], [1,-1-magnitude], [1,1+magnitude]]
    elif direction == 1: targ_pts = [[-1,-1-magnitude], [-1,1+magnitude], [1,-1], [1,1]]
    elif direction == 2: targ_pts = [[-1,-1], [-1-magnitude,1], [1,-1], [1+magnitude,1]]
    elif direction == 3: targ_pts = [[-1-magnitude,-1], [-1,1], [1+magnitude,-1], [1,1]]
    coeffs = _find_coeffs(targ_pts, _orig_pts) if invert else _find_coeffs(_orig_pts, targ_pts)
    return _apply_perspective(c, coeffs)
-----------------------------------------
ChatGPT response: import numpy as np

def test_tilt():
    # Test that the function applies a perspective transformation to the input image.
    img = np.zeros((10, 10))
    tilted_img = _tilt(img, direction=0, magnitude=0.5)
    assert not np.array_equal(img, tilted_img)

    # Test that the function correctly applies a tilt in the specified direction.
    img = np.zeros((10, 10))
    tilted_img = _tilt(img, direction=0, magnitude=0.5)
    assert not np.array_equal(img[1:6, :], tilted_img[1:6, :])

    # Test that the function correctly applies a tilt with the specified magnitude.
    img = np.zeros((10, 10))
    tilted_img = _tilt(img, direction=0, magnitude=0.5)
    assert not np.array_equal(img[:, 1:6], tilted_img[:, 1:6])

    # Test that the function correctly inverts a tilt when invert=True.
    img = np.zeros((10, 10))
    tilted_img = _tilt(img, direction=0, magnitude=0.5, invert=True)
    untilted_img = _tilt(tilted_img, direction=0, magnitude=0.5, invert=True)
    assert np.array_equal(img, untilted_img)

