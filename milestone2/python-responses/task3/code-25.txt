
----------------------------------------
 Prompt: can you write semantically equivalent code to the given function
Code:
def is_nested_list_like(obj):
    """
    Check if the object is list-like, and that all of its elements
    are also list-like.

    .. versionadded:: 0.20.0

    Parameters
    ----------
    obj : The object to check

    Returns
    -------
    is_list_like : bool
        Whether `obj` has list-like properties.

    Examples
    --------
    >>> is_nested_list_like([[1, 2, 3]])
    True
    >>> is_nested_list_like([{1, 2, 3}, {1, 2, 3}])
    True
    >>> is_nested_list_like(["foo"])
    False
    >>> is_nested_list_like([])
    False
    >>> is_nested_list_like([[1, 2, 3], 1])
    False

    Notes
    -----
    This won't reliably detect whether a consumable iterator (e. g.
    a generator) is a nested-list-like without consuming the iterator.
    To avoid consuming it, we always return False if the outer container
    doesn't define `__len__`.

    See Also
    --------
    is_list_like
    """
    return (is_list_like(obj) and hasattr(obj, '__len__') and
            len(obj) > 0 and all(is_list_like(item) for item in obj))
-----------------------------------------
ChatGPT response: def is_nested_list_like(obj):
    """
    Check if the object is list-like, and that all of its elements
    are also list-like.
    
    Parameters
    ----------
    obj : object
        The object to check.
    
    Returns
    -------
    bool
        True if `obj` is list-like and all of its elements are also
        list-like, otherwise False.
    """
    if not hasattr(obj, '__len__') or len(obj) == 0:
        return False
    for item in obj:
        if not hasattr(item, '__len__') or len(item) == 0:
            return False
        elif isinstance(item, str):
            return False
        elif isinstance(item, (list, tuple)):
            if not is_nested_list_like(item):
                return False
        else:
            return False
    return True

