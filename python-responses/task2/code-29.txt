
-----------------------------------------
 Prompt: can you write unit tests for the following function:
Code:
def construct_1d_arraylike_from_scalar(value, length, dtype):
    """
    create a np.ndarray / pandas type of specified shape and dtype
    filled with values

    Parameters
    ----------
    value : scalar value
    length : int
    dtype : pandas_dtype / np.dtype

    Returns
    -------
    np.ndarray / pandas type of length, filled with value

    """
    if is_datetime64tz_dtype(dtype):
        from pandas import DatetimeIndex
        subarr = DatetimeIndex([value] * length, dtype=dtype)
    elif is_categorical_dtype(dtype):
        from pandas import Categorical
        subarr = Categorical([value] * length, dtype=dtype)
    else:
        if not isinstance(dtype, (np.dtype, type(np.dtype))):
            dtype = dtype.dtype

        if length and is_integer_dtype(dtype) and isna(value):
            # coerce if we have nan for an integer dtype
            dtype = np.dtype('float64')
        elif isinstance(dtype, np.dtype) and dtype.kind in ("U", "S"):
            # we need to coerce to object dtype to avoid
            # to allow numpy to take our string as a scalar value
            dtype = object
            if not isna(value):
                value = to_str(value)

        subarr = np.empty(length, dtype=dtype)
        subarr.fill(value)

    return subarr
-----------------------------------------
ChatGPT response: import numpy as np
import pandas as pd
import pytest

from your_module import construct_1d_arraylike_from_scalar

def test_construct_1d_arraylike_from_scalar_np_int():
    value = 42
    length = 5
    dtype = np.int64
    expected_output = np.array([42, 42, 42, 42, 42], dtype=np.int64)
    assert np.array_equal(construct_1d_arraylike_from_scalar(value, length, dtype), expected_output)

def test_construct_1d_arraylike_from_scalar_np_float():
    value = 3.14
    length = 3
    dtype = np.float64
    expected_output = np.array([3.14, 3.14, 3.14], dtype=np.float64)
    assert np.array_equal(construct_1d_arraylike_from_scalar(value, length, dtype), expected_output)

def test_construct_1d_arraylike_from_scalar_np_datetime():
    value = pd.Timestamp('2022-02-22 22:22:22', tz='UTC')
    length = 2
    dtype = np.dtype('datetime64[ns, UTC]')
    expected_output = np.array([pd.Timestamp('2022-02-22 22:22:22', tz='UTC'), pd.Timestamp('2022-02-22 22:22:22', tz='UTC')], dtype=np.dtype('datetime64[ns, UTC]'))
    assert np.array_equal(construct_1d_arraylike_from_scalar(value, length, dtype), expected_output)

def test_construct_1d_arraylike_from_scalar_pd_category():
    value = 'foo'
    length = 4
    dtype = pd.CategoricalDtype(['foo', 'bar', 'baz'])
    expected_output = pd.Categorical(['foo', 'foo', 'foo', 'foo'], dtype=pd.CategoricalDtype(['foo', 'bar', 'baz']))
    assert pd.api.types.is_categorical_dtype(construct_1d_arraylike_from_scalar(value, length, dtype))
    assert np.array_equal(construct_1d_arraylike_from_scalar(value, length, dtype).codes, expected_output.codes)

def test_construct_1d_arraylike_from_scalar_pd_str():
    value = 'hello'
    length = 3
    dtype = pd.StringDtype()
    expected_output = pd.Series(['hello', 'hello', 'hello'], dtype=pd.StringDtype())
    assert pd.api.types.is_string_dtype(construct_1d_arraylike_from_scalar(value, length, dtype))
    assert expected_output.equals(construct_1d_arraylike_from_scalar(value, length, dtype))

def test_construct_1d_arraylike_from_scalar_coerce_int_nan():
    value = np.nan
    length = 4
    dtype = np.int64
    expected_output = np.array([np.nan, np.nan, np.nan, np.nan], dtype=np.float64)
    assert np.array_equal(construct_1d_arraylike_from_scalar(value, length, dtype), expected_output)

def test_construct_1d_arraylike_from_scalar_coerce_str_nan():
    value = np.nan
    length = 3
    dtype = pd.StringDtype()
    expected_output = pd.Series([np.nan, np.nan, np.nan], dtype=pd.StringDtype())
    assert pd.api.types.is_string_dtype(construct_1d_arraylike_from_scalar(value, length, dtype))
    assert expected_output.equals(construct_1d_arraylike_from_scalar(value, length, dtype))

def test_construct_1d_arraylike_from_scalar_invalid_dtype

