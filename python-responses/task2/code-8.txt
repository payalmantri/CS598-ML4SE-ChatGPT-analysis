
-----------------------------------------
 Prompt: can you write unit tests for the code above
Code:
def face_locations(img, number_of_times_to_upsample=1, model="hog"):
    """
    Returns an array of bounding boxes of human faces in a image

    :param img: An image (as a numpy array)
    :param number_of_times_to_upsample: How many times to upsample the image looking for faces. Higher numbers find smaller faces.
    :param model: Which face detection model to use. "hog" is less accurate but faster on CPUs. "cnn" is a more accurate
                  deep-learning model which is GPU/CUDA accelerated (if available). The default is "hog".
    :return: A list of tuples of found face locations in css (top, right, bottom, left) order
    """
    if model == "cnn":
        return [_trim_css_to_bounds(_rect_to_css(face.rect), img.shape) for face in _raw_face_locations(img, number_of_times_to_upsample, "cnn")]
    else:
        return [_trim_css_to_bounds(_rect_to_css(face), img.shape) for face in _raw_face_locations(img, number_of_times_to_upsample, model)]
-----------------------------------------
ChatGPT response: import numpy as np
import unittest
from my_module import face_locations

class TestFaceLocations(unittest.TestCase):
    
    def setUp(self):
        self.image = np.zeros((100, 100, 3), dtype=np.uint8)
    
    def test_returns_list(self):
        result = face_locations(self.image)
        self.assertIsInstance(result, list)
    
    def test_returns_empty_list_when_no_face_found(self):
        result = face_locations(self.image)
        self.assertEqual(result, [])
    
    def test_returns_correct_css_format(self):
        self.image[20:40, 30:50, :] = 255
        result = face_locations(self.image)
        self.assertEqual(result, [(20, 50, 40, 30)])
    
    def test_uses_hog_by_default(self):
        result_hog = face_locations(self.image, model="hog")
        result_cnn = face_locations(self.image, model="cnn")
        self.assertEqual(result_hog, result_cnn)
    
    def test_uses_cnn_when_specified(self):
        result_cnn = face_locations(self.image, model="cnn")
        self.assertNotEqual(result_cnn, [])
    
    def test_handles_multiple_faces(self):
        self.image[20:40, 30:50, :] = 255
        self.image[60:80, 70:90, :] = 255
        result = face_locations(self.image)
        self.assertEqual(result, [(20, 50, 40, 30), (60, 90, 80, 70)])
    
    def test_handles_upsampling(self):
        self.image[20:30, 30:40, :] = 255
        result_no_upsample = face_locations(self.image, number_of_times_to_upsample=1)
        result_upsample = face_locations(self.image, number_of_times_to_upsample=2)
        self.assertEqual(len(result_no_upsample), 0)
        self.assertEqual(result_upsample, [(20, 40, 30, 30)])
    
if __name__ == '__main__':
    unittest.main()

