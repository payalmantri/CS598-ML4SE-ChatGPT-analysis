
-----------------------------------------
 Prompt: can you write unit tests for the given code
Code:
def get_transforms(do_flip:bool=True, flip_vert:bool=False, max_rotate:float=10., max_zoom:float=1.1,
                   max_lighting:float=0.2, max_warp:float=0.2, p_affine:float=0.75,
                   p_lighting:float=0.75, xtra_tfms:Optional[Collection[Transform]]=None)->Collection[Transform]:
    "Utility func to easily create a list of flip, rotate, `zoom`, warp, lighting transforms."
    res = [rand_crop()]
    if do_flip:    res.append(dihedral_affine() if flip_vert else flip_lr(p=0.5))
    if max_warp:   res.append(symmetric_warp(magnitude=(-max_warp,max_warp), p=p_affine))
    if max_rotate: res.append(rotate(degrees=(-max_rotate,max_rotate), p=p_affine))
    if max_zoom>1: res.append(rand_zoom(scale=(1.,max_zoom), p=p_affine))
    if max_lighting:
        res.append(brightness(change=(0.5*(1-max_lighting), 0.5*(1+max_lighting)), p=p_lighting))
        res.append(contrast(scale=(1-max_lighting, 1/(1-max_lighting)), p=p_lighting))
    #       train                   , valid
    return (res + listify(xtra_tfms), [crop_pad()])
-----------------------------------------
ChatGPT response: from fastai.vision import *

def test_get_transforms():
    # Test default input arguments
    transforms = get_transforms()
    assert isinstance(transforms, tuple)
    assert len(transforms) == 2
    assert all(isinstance(tfm, Transform) for tfm in transforms[0])
    assert isinstance(transforms[1][0], CropPad)
    
    # Test with different input arguments
    transforms = get_transforms(do_flip=True, flip_vert=True, max_rotate=20., max_zoom=1.2, 
                                max_lighting=0.3, max_warp=0.3, p_affine=0.8, p_lighting=0.8, 
                                xtra_tfms=[rotate(degrees=90)])
    assert isinstance(transforms, tuple)
    assert len(transforms) == 2
    assert all(isinstance(tfm, Transform) for tfm in transforms[0])
    assert isinstance(transforms[1][0], CropPad)
    
    # Test that transformations are added or not added correctly
    transforms = get_transforms(do_flip=False, max_warp=0)
    assert len(transforms[0]) == 1
    transforms = get_transforms(do_flip=True, flip_vert=True, max_warp=0)
    assert len(transforms[0]) == 2
    assert isinstance(transforms[0][1], FlipUD)
    assert not any(isinstance(tfm, SymmetricWarp) for tfm in transforms[0])
    
    # Test that random transformations are applied based on probability arguments
    transforms = get_transforms(max_lighting=0.5, p_lighting=0.8)
    assert any(isinstance(tfm, Brightness) for tfm in transforms[0])
    assert any(isinstance(tfm, Contrast) for tfm in transforms[0])
    assert all(tfm.do_run for tfm in transforms[0] if isinstance(tfm, Brightness) or isinstance(tfm, Contrast))
    
    transforms = get_transforms(max_rotate=10., p_affine=0.5)
    assert any(isinstance(tfm, Rotate) for tfm in transforms[0])
    assert all(tfm.do_run for tfm in transforms[0] if isinstance(tfm, Rotate))

