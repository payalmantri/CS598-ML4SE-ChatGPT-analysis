
-----------------------------------------
 Prompt: can you generate unit tests for this code
Code:
def nsmallest(n, iterable, key=None):
    """Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key)[:n]
    """

    # Short-cut for n==1 is to use min()
    if n == 1:
        it = iter(iterable)
        sentinel = object()
        if key is None:
            result = min(it, default=sentinel)
        else:
            result = min(it, default=sentinel, key=key)
        return [] if result is sentinel else [result]

    # When n>=size, it's faster to use sorted()
    try:
        size = len(iterable)
    except (TypeError, AttributeError):
        pass
    else:
        if n >= size:
            return sorted(iterable, key=key)[:n]

    # When key is none, use simpler decoration
    if key is None:
        it = iter(iterable)
        # put the range(n) first so that zip() doesn't
        # consume one too many elements from the iterator
        result = [(elem, i) for i, elem in zip(range(n), it)]
        if not result:
            return result
        _heapify_max(result)
        top = result[0][0]
        order = n
        _heapreplace = _heapreplace_max
        for elem in it:
            if elem < top:
                _heapreplace(result, (elem, order))
                top = result[0][0]
                order += 1
        result.sort()
        return [r[0] for r in result]

    # General case, slowest method
    it = iter(iterable)
    result = [(key(elem), i, elem) for i, elem in zip(range(n), it)]
    if not result:
        return result
    _heapify_max(result)
    top = result[0][0]
    order = n
    _heapreplace = _heapreplace_max
    for elem in it:
        k = key(elem)
        if k < top:
            _heapreplace(result, (k, order, elem))
            top = result[0][0]
            order += 1
    result.sort()
    return [r[2] for r in result]
-----------------------------------------
ChatGPT response: import unittest

class TestNSmallest(unittest.TestCase):
    
    def test_basic(self):
        # Test with a simple list of integers
        lst = [3, 5, 1, 4, 2]
        self.assertEqual(nsmallest(3, lst), [1, 2, 3])
        
        # Test with n=1
        self.assertEqual(nsmallest(1, lst), [1])
        
        # Test with an empty list
        self.assertEqual(nsmallest(3, []), [])
    
    def test_custom_key(self):
        # Test with a list of tuples, where each tuple has a name and a score
        lst = [("Alice", 85), ("Bob", 92), ("Charlie", 78), ("David", 90)]
        
        # Test with key=lambda x: x[1], i.e. sorting by score
        self.assertEqual(nsmallest(2, lst, key=lambda x: x[1]), [("Charlie", 78), ("Alice", 85)])
        
        # Test with key=lambda x: x[0], i.e. sorting by name
        self.assertEqual(nsmallest(3, lst, key=lambda x: x[0]), [("Alice", 85), ("Bob", 92), ("Charlie", 78)])
    
    def test_large_data(self):
        # Test with a large list of random integers
        import random
        lst = [random.randint(0, 10000) for i in range(100000)]
        self.assertEqual(nsmallest(10, lst), sorted(lst)[:10])

