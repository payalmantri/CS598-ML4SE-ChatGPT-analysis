
-----------------------------------------
 Prompt: can you write unit tests for the given function
Code:
def construct_1d_object_array_from_listlike(values):
    """
    Transform any list-like object in a 1-dimensional numpy array of object
    dtype.

    Parameters
    ----------
    values : any iterable which has a len()

    Raises
    ------
    TypeError
        * If `values` does not have a len()

    Returns
    -------
    1-dimensional numpy array of dtype object
    """
    # numpy will try to interpret nested lists as further dimensions, hence
    # making a 1D array that contains list-likes is a bit tricky:
    result = np.empty(len(values), dtype='object')
    result[:] = values
    return result
-----------------------------------------
ChatGPT response: import numpy as np
import unittest

class TestConstruct1DObjectArrayFromListlike(unittest.TestCase):
    
    def test_listlike_input(self):
        values = [1, 2, 3, 4, 5]
        expected_result = np.array([1, 2, 3, 4, 5], dtype='object')
        result = construct_1d_object_array_from_listlike(values)
        self.assertTrue(np.array_equal(result, expected_result))
        
    def test_tuple_input(self):
        values = (1, 2, 3, 4, 5)
        expected_result = np.array([1, 2, 3, 4, 5], dtype='object')
        result = construct_1d_object_array_from_listlike(values)
        self.assertTrue(np.array_equal(result, expected_result))
        
    def test_numpy_array_input(self):
        values = np.array([1, 2, 3, 4, 5])
        expected_result = np.array([1, 2, 3, 4, 5], dtype='object')
        result = construct_1d_object_array_from_listlike(values)
        self.assertTrue(np.array_equal(result, expected_result))
        
    def test_empty_listlike_input(self):
        values = []
        expected_result = np.array([], dtype='object')
        result = construct_1d_object_array_from_listlike(values)
        self.assertTrue(np.array_equal(result, expected_result))
        
    def test_iterable_without_len(self):
        values = (i*i for i in range(5))
        with self.assertRaises(TypeError):
            construct_1d_object_array_from_listlike(values)
            
if __name__ == '__main__':
    unittest.main()

