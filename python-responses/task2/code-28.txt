
-----------------------------------------
 Prompt: can you write unit tests for the following function:
Code:
def cast_scalar_to_array(shape, value, dtype=None):
    """
    create np.ndarray of specified shape and dtype, filled with values

    Parameters
    ----------
    shape : tuple
    value : scalar value
    dtype : np.dtype, optional
        dtype to coerce

    Returns
    -------
    ndarray of shape, filled with value, of specified / inferred dtype

    """

    if dtype is None:
        dtype, fill_value = infer_dtype_from_scalar(value)
    else:
        fill_value = value

    values = np.empty(shape, dtype=dtype)
    values.fill(fill_value)

    return values
-----------------------------------------
ChatGPT response: import numpy as np

def test_cast_scalar_to_array_with_specified_dtype():
    # Arrange
    shape = (2, 3)
    value = 0.5
    dtype = np.float64
    
    # Act
    result = cast_scalar_to_array(shape, value, dtype)
    
    # Assert
    assert result.shape == shape
    assert result.dtype == dtype
    assert np.allclose(result, np.full(shape, value, dtype=dtype))

def test_cast_scalar_to_array_with_inferred_dtype():
    # Arrange
    shape = (4,)
    value = 10
    
    # Act
    result = cast_scalar_to_array(shape, value)
    
    # Assert
    assert result.shape == shape
    assert result.dtype == np.int64
    assert np.allclose(result, np.full(shape, value, dtype=np.int64))

def test_cast_scalar_to_array_with_zero_value():
    # Arrange
    shape = (3, 3, 3)
    value = 0
    
    # Act
    result = cast_scalar_to_array(shape, value)
    
    # Assert
    assert result.shape == shape
    assert result.dtype == np.int64
    assert np.allclose(result, np.full(shape, value, dtype=np.int64))

